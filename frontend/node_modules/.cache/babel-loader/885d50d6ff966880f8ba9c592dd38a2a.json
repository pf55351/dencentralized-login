{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DropdownItem from './components/item';\nimport DropdownDivider from './components/divider';\nimport Button from '../button';\nimport Element from '../element';\n\nvar Dropdown = function Dropdown(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      value = _ref.value,\n      color = _ref.color,\n      align = _ref.align,\n      right = _ref.right,\n      up = _ref.up,\n      hoverable = _ref.hoverable,\n      label = _ref.label,\n      onChange = _ref.onChange,\n      closeOnSelect = _ref.closeOnSelect,\n      icon = _ref.icon,\n      domRef = _ref.domRef,\n      disabled = _ref.disabled,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"value\", \"color\", \"align\", \"right\", \"up\", \"hoverable\", \"label\", \"onChange\", \"closeOnSelect\", \"icon\", \"domRef\", \"disabled\"]);\n\n  var ref = useRef(domRef);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var close = function close(evt) {\n    // IDK yet how to test using the ref in enzime\n    // istanbul ignore if\n    if (hoverable || evt && ref && ref.current && ref.current.contains(evt.target)) {\n      return;\n    }\n\n    if (ref.current) {\n      setIsOpen(false);\n    }\n  };\n\n  var onSelect = function onSelect(selectedValue) {\n    return function () {\n      if (onChange) {\n        onChange(selectedValue);\n      }\n\n      if (closeOnSelect) {\n        close();\n      }\n    };\n  };\n\n  useEffect(function () {\n    window.addEventListener('click', close);\n    return function () {\n      window.removeEventListener('click', close);\n    };\n  }, []);\n  var current = label;\n  var childrenArray = React.Children.map(children, function (child, i) {\n    if (child.type === DropdownItem && (i === 0 && !label || child.props.value === value)) {\n      current = child.props.children;\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, child.type === DropdownItem ? {\n      active: child.props.value === value,\n      onClick: onSelect(child.props.value)\n    } : {});\n  });\n  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {\n    domRef: ref,\n    className: classnames('dropdown', className, {\n      'is-active': isOpen,\n      'is-up': up,\n      'is-right': right || align === 'right',\n      'is-hoverable': hoverable\n    })\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-trigger\",\n    role: \"presentation\",\n    onClick: function onClick() {\n      if (disabled) {\n        return;\n      }\n\n      setIsOpen(function (open) {\n        return !open;\n      });\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: disabled,\n    color: color\n  }, /*#__PURE__*/React.createElement(\"span\", null, current), icon)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-menu\",\n    id: \"dropdown-menu\",\n    role: \"menu\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-content\"\n  }, childrenArray)));\n};\n\nDropdown.Item = DropdownItem;\nDropdown.Divider = DropdownDivider;\nDropdown.defaultProps = {\n  closeOnSelect: true\n};\nexport default Dropdown;","map":{"version":3,"sources":["../../../src/components/dropdown/dropdown.js"],"names":["Dropdown","className","children","value","color","align","right","up","hoverable","label","onChange","closeOnSelect","icon","domRef","disabled","props","ref","useRef","isOpen","setIsOpen","useState","close","evt","onSelect","useEffect","window","current","childrenArray","child","i","active","onClick","classnames"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport DropdownItem from './components/item';\nimport DropdownDivider from './components/divider';\nimport Button from '../button';\n\nimport Element from '../element';\n\nconst Dropdown = ({\n  className,\n  children,\n  value,\n  color,\n  align,\n  right,\n  up,\n  hoverable,\n  label,\n  onChange,\n  closeOnSelect,\n  icon,\n  domRef,\n  disabled,\n  ...props\n}) => {\n  const ref = useRef(domRef);\n  const [isOpen, setIsOpen] = useState(false);\n  const close = (evt) => {\n    // IDK yet how to test using the ref in enzime\n    // istanbul ignore if\n    if (\n      hoverable ||\n      (evt && ref && ref.current && ref.current.contains(evt.target))\n    ) {\n      return;\n    }\n    if (ref.current) {\n      setIsOpen(false);\n    }\n  };\n\n  const onSelect = (selectedValue) => {\n    return () => {\n      if (onChange) {\n        onChange(selectedValue);\n      }\n      if (closeOnSelect) {\n        close();\n      }\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', close);\n    return () => {\n      window.removeEventListener('click', close);\n    };\n  }, []);\n\n  let current = label;\n\n  const childrenArray = React.Children.map(children, (child, i) => {\n    if (\n      child.type === DropdownItem &&\n      ((i === 0 && !label) || child.props.value === value)\n    ) {\n      current = child.props.children;\n    }\n    return React.cloneElement(\n      child,\n      child.type === DropdownItem\n        ? {\n            active: child.props.value === value,\n            onClick: onSelect(child.props.value),\n          }\n        : {},\n    );\n  });\n\n  return (\n    <Element\n      {...props}\n      domRef={ref}\n      className={classnames('dropdown', className, {\n        'is-active': isOpen,\n        'is-up': up,\n        'is-right': right || align === 'right',\n        'is-hoverable': hoverable,\n      })}\n    >\n      <div\n        className=\"dropdown-trigger\"\n        role=\"presentation\"\n        onClick={() => {\n          if (disabled) {\n            return;\n          }\n          setIsOpen((open) => {\n            return !open;\n          });\n        }}\n      >\n        <Button disabled={disabled} color={color}>\n          <span>{current}</span>\n          {icon}\n        </Button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">{childrenArray}</div>\n      </div>\n    </Element>\n  );\n};\n\nDropdown.Item = DropdownItem;\n\nDropdown.Divider = DropdownDivider;\n\nDropdown.propTypes = {\n  /**\n   * The value of the currently selected dropdown item. If this value match\n   * with the value passed to a Dropdown.item it will be used as label if the label prop its empty\n   */\n  value: PropTypes.any,\n  /**\n   * Called when a dropdown item is selected.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The color of the dropdown button.\n   */\n  color: PropTypes.oneOfType([\n    PropTypes.oneOf([\n      'primary',\n      'link',\n      'info',\n      'success',\n      'warning',\n      'danger',\n      'dark',\n      'text',\n    ]),\n    PropTypes.string,\n  ]),\n  disabled: PropTypes.bool,\n  /**\n   * Whether the dropdown should align to the right side.\n   */\n  right: PropTypes.bool,\n  /**\n   * Whether the dropdown menu should appear above the dropdown button\n   * instead of below.\n   */\n  up: PropTypes.bool,\n  /**\n   * Whether the dropdown menu can be activated when the cursor\n   * hovers above the button without clicking.\n   */\n  hoverable: PropTypes.bool,\n  /**\n   * A string, or a react component that displays the label of the dropdown\n   * button. if not set it will be use the selected Dropdown.Item or the first one\n   * if there is no selected\n   */\n  label: PropTypes.node,\n  /**\n   * Whether the dropdown menu should be closed when a dropdown item is selected.\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * A react component that draws the icon of the dropdown button.\n   * Usually it is an arrow (or a chevron) pointing downwards (or upwards).\n   */\n  icon: PropTypes.node,\n  /**\n   * Additional CSS classes to pass to `<Dropdown />`.\n   * They will sit alongside pre-applied bulma classes.\n   */\n};\n\nDropdown.defaultProps = {\n  closeOnSelect: true,\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}