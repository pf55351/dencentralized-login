{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Button from '../../../button';\nimport Element from '../../../element';\nimport useModalContext from '../../context';\n\nvar ModalCardHead = function ModalCardHead(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      showClose = _ref.showClose,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"showClose\"]);\n\n  var _useModalContext = useModalContext(),\n      onClose = _useModalContext.onClose;\n\n  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {\n    className: classnames('modal-card-head', className)\n  }), children, showClose && /*#__PURE__*/React.createElement(Button, {\n    remove: true,\n    onClick: onClose\n  }));\n};\n\nModalCardHead.defaultProps = {\n  showClose: true,\n  renderAs: 'header'\n};\nexport default ModalCardHead;","map":{"version":3,"sources":["../../../../../src/components/modal/components/card/header.js"],"names":["ModalCardHead","children","className","showClose","props","onClose","useModalContext","classnames","renderAs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,OAAA,MAAA,MAAA,iBAAA;AAEA,OAAA,OAAA,MAAA,kBAAA;AACA,OAAA,eAAA,MAAA,eAAA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAAkD;AAAA,MAA/CC,QAA+C,GAAA,IAAA,CAA/CA,QAA+C;AAAA,MAArCC,SAAqC,GAAA,IAAA,CAArCA,SAAqC;AAAA,MAA1BC,SAA0B,GAAA,IAAA,CAA1BA,SAA0B;AAAA,MAAZC,KAAY,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,WAAA,CAAA,CAAA;;AACtE,MAAA,gBAAA,GAAoBE,eAApB,EAAA;AAAA,MAAQD,OAAR,GAAA,gBAAA,CAAA,OAAA;;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAoB,IAAA,SAAS,EAAEE,UAAU,CAAA,iBAAA,EAAA,SAAA;AAAzC,GAAA,CAAA,EAAA,QAAA,EAEGJ,SAAS,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,MAAM,EAAd,IAAA;AAAe,IAAA,OAAO,EAAEE;AAAxB,GAAA,CAFhB,CADF;AAFF,CAAA;;AAsBAL,aAAa,CAAbA,YAAAA,GAA6B;AAC3BG,EAAAA,SAAS,EADkB,IAAA;AAE3BK,EAAAA,QAAQ,EAAE;AAFiB,CAA7BR;AAKA,eAAA,aAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Button from '../../../button';\n\nimport Element from '../../../element';\nimport useModalContext from '../../context';\n\nconst ModalCardHead = ({ children, className, showClose, ...props }) => {\n  const { onClose } = useModalContext();\n  return (\n    <Element {...props} className={classnames('modal-card-head', className)}>\n      {children}\n      {showClose && <Button remove onClick={onClose} />}\n    </Element>\n  );\n};\n\nModalCardHead.propTypes = {\n  /**\n   * True if the card should display the close button on the header of the modal card\n   */\n  showClose: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nModalCardHead.defaultProps = {\n  showClose: true,\n  renderAs: 'header',\n};\n\nexport default ModalCardHead;\n"]},"metadata":{},"sourceType":"module"}