{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Element from '../../element';\nimport useFieldContext from './field/context';\nimport { normalizeAlign } from '../../../services/normalizer';\n\nvar InputFile = function InputFile(_ref) {\n  var _classnames;\n\n  var className = _ref.className,\n      style = _ref.style,\n      onChange = _ref.onChange,\n      color = _ref.color,\n      size = _ref.size,\n      fullwidth = _ref.fullwidth,\n      align = _ref.align,\n      boxed = _ref.boxed,\n      name = _ref.name,\n      label = _ref.label,\n      icon = _ref.icon,\n      inputProps = _ref.inputProps,\n      filename = _ref.filename,\n      value = _ref.value,\n      props = _objectWithoutProperties(_ref, [\"className\", \"style\", \"onChange\", \"color\", \"size\", \"fullwidth\", \"align\", \"boxed\", \"name\", \"label\", \"icon\", \"inputProps\", \"filename\", \"value\"]);\n\n  var ref = useRef();\n  var context = useFieldContext();\n  var calculatedSize = size || context.size;\n  useEffect(function () {\n    if (!ref.current) {\n      return;\n    }\n\n    if (value) {\n      ref.current.files = value;\n    } else {\n      ref.current.value = '';\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(Element, _extends({\n    style: style\n  }, props, {\n    className: classnames('file', className, (_classnames = {}, _defineProperty(_classnames, \"is-\".concat(calculatedSize), calculatedSize), _defineProperty(_classnames, \"is-\".concat(color), color), _defineProperty(_classnames, \"is-\".concat(normalizeAlign(align)), align), _defineProperty(_classnames, 'has-name', !!filename), _defineProperty(_classnames, 'is-boxed', boxed), _defineProperty(_classnames, 'is-fullwidth', fullwidth), _classnames))\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"file-label\"\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({}, inputProps, {\n    name: name,\n    type: \"file\",\n    className: \"file-input\",\n    onChange: onChange,\n    ref: ref\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-cta\"\n  }, icon && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-icon\"\n  }, icon), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-label\"\n  }, label)), filename && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-name\"\n  }, filename)));\n};\n\nInputFile.defaultProps = {\n  label: 'Choose a file...',\n  inputProps: {}\n};\nexport default InputFile;","map":{"version":3,"sources":["../../../../src/components/form/components/input-file.js"],"names":["InputFile","className","style","onChange","color","size","fullwidth","align","boxed","name","label","icon","inputProps","filename","value","props","ref","useRef","context","useFieldContext","calculatedSize","useEffect","classnames","normalizeAlign"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,MAAA,EAAA,SAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,OAAA,MAAA,eAAA;AAEA,OAAA,eAAA,MAAA,iBAAA;AACA,SAAA,cAAA,QAAA,8BAAA;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAgBZ;AAAA,MAAA,WAAA;;AAAA,MAfJC,SAeI,GAAA,IAAA,CAfJA,SAeI;AAAA,MAdJC,KAcI,GAAA,IAAA,CAdJA,KAcI;AAAA,MAbJC,QAaI,GAAA,IAAA,CAbJA,QAaI;AAAA,MAZJC,KAYI,GAAA,IAAA,CAZJA,KAYI;AAAA,MAXJC,IAWI,GAAA,IAAA,CAXJA,IAWI;AAAA,MAVJC,SAUI,GAAA,IAAA,CAVJA,SAUI;AAAA,MATJC,KASI,GAAA,IAAA,CATJA,KASI;AAAA,MARJC,KAQI,GAAA,IAAA,CARJA,KAQI;AAAA,MAPJC,IAOI,GAAA,IAAA,CAPJA,IAOI;AAAA,MANJC,KAMI,GAAA,IAAA,CANJA,KAMI;AAAA,MALJC,IAKI,GAAA,IAAA,CALJA,IAKI;AAAA,MAJJC,UAII,GAAA,IAAA,CAJJA,UAII;AAAA,MAHJC,QAGI,GAAA,IAAA,CAHJA,QAGI;AAAA,MAFJC,KAEI,GAAA,IAAA,CAFJA,KAEI;AAAA,MADDC,KACC,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,YAAA,EAAA,UAAA,EAAA,OAAA,CAAA,CAAA;;AACJ,MAAMC,GAAG,GAAGC,MAAZ,EAAA;AACA,MAAMC,OAAO,GAAGC,eAAhB,EAAA;AACA,MAAMC,cAAc,GAAGf,IAAI,IAAIa,OAAO,CAAtC,IAAA;AAEAG,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACL,GAAG,CAAR,OAAA,EAAkB;AAChB;AACD;;AACD,QAAA,KAAA,EAAW;AACTA,MAAAA,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,GAAAA,KAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,GAAAA,EAAAA;AACD;AARM,GAAA,EASN,CATHK,KASG,CATM,CAATA;AAWA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EAAEnB;AADT,GAAA,EAAA,KAAA,EAAA;AAGE,IAAA,SAAS,EAAEoB,UAAU,CAAA,MAAA,EAAA,SAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,MAAA,MAAA,CAAA,cAAA,CAAA,EAAA,cAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,MAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,MAAA,MAAA,CAGZC,cAAc,CAHF,KAGE,CAHF,CAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,UAAA,EAIP,CAAC,CAJM,QAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,UAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,cAAA,EAAA,SAAA,CAAA,EAAA,WAAA;AAHvB,GAAA,CAAA,EAAA,aAYE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAO,IAAA,SAAS,EAAC;AAAjB,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,IAAA,IAAI,EAFN,IAAA;AAGE,IAAA,IAAI,EAHN,MAAA;AAIE,IAAA,SAAS,EAJX,YAAA;AAKE,IAAA,QAAQ,EALV,QAAA;AAME,IAAA,GAAG,EAAEP;AANP,GAAA,CAAA,CADF,EAAA,aASE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EACGL,IAAI,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EADX,IACW,CADX,EAAA,aAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAXJ,KAWI,CAFF,CATF,EAaGE,QAAQ,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EA1BnB,QA0BmB,CAbf,CAZF,CADF;AAhCF,CAAA;;AAgIAb,SAAS,CAATA,YAAAA,GAAyB;AACvBU,EAAAA,KAAK,EADkB,kBAAA;AAEvBE,EAAAA,UAAU,EAAE;AAFW,CAAzBZ;AAKA,eAAA,SAAA","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Element from '../../element';\n\nimport useFieldContext from './field/context';\nimport { normalizeAlign } from '../../../services/normalizer';\n\nconst InputFile = ({\n  className,\n  style,\n  onChange,\n  color,\n  size,\n  fullwidth,\n  align,\n  boxed,\n  name,\n  label,\n  icon,\n  inputProps,\n  filename,\n  value,\n  ...props\n}) => {\n  const ref = useRef();\n  const context = useFieldContext();\n  const calculatedSize = size || context.size;\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n    if (value) {\n      ref.current.files = value;\n    } else {\n      ref.current.value = '';\n    }\n  }, [value]);\n\n  return (\n    <Element\n      style={style}\n      {...props}\n      className={classnames('file', className, {\n        [`is-${calculatedSize}`]: calculatedSize,\n        [`is-${color}`]: color,\n        [`is-${normalizeAlign(align)}`]: align,\n        'has-name': !!filename,\n        'is-boxed': boxed,\n        'is-fullwidth': fullwidth,\n      })}\n    >\n      <label className=\"file-label\">\n        <input\n          {...inputProps}\n          name={name}\n          type=\"file\"\n          className=\"file-input\"\n          onChange={onChange}\n          ref={ref}\n        />\n        <span className=\"file-cta\">\n          {icon && <span className=\"file-icon\">{icon}</span>}\n          <span className=\"file-label\">{label}</span>\n        </span>\n        {filename && <span className=\"file-name\">{filename}</span>}\n      </label>\n    </Element>\n  );\n};\n\nInputFile.propTypes = {\n  /**\n   * The color of `InputFile`\n   */\n  color: PropTypes.oneOfType([\n    PropTypes.oneOf([\n      'primary',\n      'link',\n      'info',\n      'success',\n      'warning',\n      'danger',\n      'dark',\n      'text',\n    ]),\n    PropTypes.string,\n  ]),\n  /**\n   * The size of `InputFile`\n   */\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large']),\n    PropTypes.string,\n  ]),\n  /**\n   * The name of the selected file. It will be shown as the file label\n   * of this component, next/under the upload button.\n   */\n  filename: PropTypes.string,\n  /**\n   * The selected file(s) object.\n   */\n  value: PropTypes.any,\n  /**\n   * Whether `InputFile` should take up all available width.\n   */\n  fullwidth: PropTypes.bool,\n  align: PropTypes.oneOf(['center', 'right']),\n  /**\n   * Whether `InputFile` should be rendered in a box shape.\n   */\n  boxed: PropTypes.bool,\n  /**\n   * The name of the input field Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)\n   */\n  name: PropTypes.string,\n  /**\n   * Label for the upload button.\n   */\n  label: PropTypes.string,\n  /**\n   * An optional icon to be drawn in the button next to/on top of the button label.\n   *\n   * `icon={<i className=\"fas ...\" />}`\n   */\n  icon: PropTypes.element,\n  /**\n   * Additional props to be passed to the underlying `<input>` element.\n   * Other props passed to `InputFile` itself will be passed to the element\n   * that wraps around the `<input>` element.\n   */\n  inputProps: PropTypes.shape({}),\n};\n\nInputFile.defaultProps = {\n  label: 'Choose a file...',\n  inputProps: {},\n};\n\nexport default InputFile;\n"]},"metadata":{},"sourceType":"module"}