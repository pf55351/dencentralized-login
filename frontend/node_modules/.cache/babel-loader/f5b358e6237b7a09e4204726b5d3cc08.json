{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Element from '../../element';\nimport Icon from '../../icon';\nimport useFieldContext from './field/context';\nimport Button from '../../button';\n\nvar Control = function Control(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      fullwidth = _ref.fullwidth,\n      loading = _ref.loading,\n      iconType = _ref.iconType,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"fullwidth\", \"loading\", \"iconType\"]);\n\n  var context = useFieldContext();\n\n  var isIcon = function isIcon(child) {\n    return child.type === (iconType || Icon) && (child.props.align === 'left' || child.props.align === 'right');\n  };\n\n  var updatedChildren = React.Children.map(children, function (child) {\n    if (!child || !isIcon(child) && child.type !== Button) {\n      return child;\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      size: child.props.size || context.size\n    });\n  });\n  var icons = React.Children.toArray(updatedChildren).filter(isIcon).reduce(function (acc, icon) {\n    return {\n      iconLeft: acc.iconLeft || icon.props.align === 'left',\n      iconRight: acc.iconRight || icon.props.align === 'right'\n    };\n  }, {\n    iconLeft: false,\n    iconRight: false\n  });\n  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {\n    className: classnames('control', className, {\n      'is-expanded': fullwidth,\n      'has-icons-left': icons.iconLeft,\n      'has-icons-right': icons.iconRight,\n      'is-loading': loading\n    })\n  }), updatedChildren);\n};\n\nControl.defaultProps = {};\nexport default Control;","map":{"version":3,"sources":["../../../../src/components/form/components/control.js"],"names":["Control","children","className","fullwidth","loading","iconType","props","context","useFieldContext","isIcon","child","updatedChildren","size","icons","iconLeft","acc","icon","iconRight","classnames"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,OAAA,OAAA,MAAA,eAAA;AACA,OAAA,IAAA,MAAA,YAAA;AACA,OAAA,eAAA,MAAA,iBAAA;AACA,OAAA,MAAA,MAAA,cAAA;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAOV;AAAA,MANJC,QAMI,GAAA,IAAA,CANJA,QAMI;AAAA,MALJC,SAKI,GAAA,IAAA,CALJA,SAKI;AAAA,MAJJC,SAII,GAAA,IAAA,CAJJA,SAII;AAAA,MAHJC,OAGI,GAAA,IAAA,CAHJA,OAGI;AAAA,MAFJC,QAEI,GAAA,IAAA,CAFJA,QAEI;AAAA,MADDC,KACC,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,CAAA,CAAA;;AACJ,MAAMC,OAAO,GAAGC,eAAhB,EAAA;;AAEA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,KAAA,EAAW;AACxB,WACEC,KAAK,CAALA,IAAAA,MAAgBL,QAAQ,IAAxBK,IAAAA,MACCA,KAAK,CAALA,KAAAA,CAAAA,KAAAA,KAAAA,MAAAA,IAAgCA,KAAK,CAALA,KAAAA,CAAAA,KAAAA,KAFnC,OACEA,CADF;AADF,GAAA;;AAOA,MAAMC,eAAe,GAAG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,UAAA,KAAA,EAAW;AAC9D,QAAI,CAAA,KAAA,IAAW,CAACF,MAAM,CAAP,KAAO,CAAP,IAAkBC,KAAK,CAALA,IAAAA,KAAjC,MAAA,EAAyD;AACvD,aAAA,KAAA;AACD;;AACD,WAAA,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BE,MAAAA,IAAI,EAAEF,KAAK,CAALA,KAAAA,CAAAA,IAAAA,IAAoBH,OAAO,CAACK;AADH,KAA1B,CAAP;AAJF,GAAwB,CAAxB;AASA,MAAMC,KAAK,GAAG,KAAK,CAAL,QAAA,CAAA,OAAA,CAAA,eAAA,EAAA,MAAA,CAAA,MAAA,EAAA,MAAA,CAGV,UAAA,GAAA,EAAA,IAAA,EAAe;AACb,WAAO;AACLC,MAAAA,QAAQ,EAAEC,GAAG,CAAHA,QAAAA,IAAgBC,IAAI,CAAJA,KAAAA,CAAAA,KAAAA,KADrB,MAAA;AAELC,MAAAA,SAAS,EAAEF,GAAG,CAAHA,SAAAA,IAAiBC,IAAI,CAAJA,KAAAA,CAAAA,KAAAA,KAAqB;AAF5C,KAAP;AAJQ,GAAA,EASV;AAAEF,IAAAA,QAAQ,EAAV,KAAA;AAAmBG,IAAAA,SAAS,EAAE;AAA9B,GATU,CAAd;AAWA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAAA,SAAA,EAAuB;AAC1C,qBAD0C,SAAA;AAE1C,wBAAkBL,KAAK,CAFmB,QAAA;AAG1C,yBAAmBA,KAAK,CAHkB,SAAA;AAI1C,oBAAcT;AAJ4B,KAAvB;AAFvB,GAAA,CAAA,EADF,eACE,CADF;AArCF,CAAA;;AAkEAJ,OAAO,CAAPA,YAAAA,GAAAA,EAAAA;AAEA,eAAA,OAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Element from '../../element';\nimport Icon from '../../icon';\nimport useFieldContext from './field/context';\nimport Button from '../../button';\n\nconst Control = ({\n  children,\n  className,\n  fullwidth,\n  loading,\n  iconType,\n  ...props\n}) => {\n  const context = useFieldContext();\n\n  const isIcon = (child) => {\n    return (\n      child.type === (iconType || Icon) &&\n      (child.props.align === 'left' || child.props.align === 'right')\n    );\n  };\n\n  const updatedChildren = React.Children.map(children, (child) => {\n    if (!child || (!isIcon(child) && child.type !== Button)) {\n      return child;\n    }\n    return React.cloneElement(child, {\n      size: child.props.size || context.size,\n    });\n  });\n\n  const icons = React.Children.toArray(updatedChildren)\n    .filter(isIcon)\n    .reduce(\n      (acc, icon) => {\n        return {\n          iconLeft: acc.iconLeft || icon.props.align === 'left',\n          iconRight: acc.iconRight || icon.props.align === 'right',\n        };\n      },\n      { iconLeft: false, iconRight: false },\n    );\n  return (\n    <Element\n      {...props}\n      className={classnames('control', className, {\n        'is-expanded': fullwidth,\n        'has-icons-left': icons.iconLeft,\n        'has-icons-right': icons.iconRight,\n        'is-loading': loading,\n      })}\n    >\n      {updatedChildren}\n    </Element>\n  );\n};\n\nControl.propTypes = {\n  loading: PropTypes.bool,\n  iconType: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n  /**\n   * When true and the `Field` container has the `kind` props set the Control\n   * will use all available space instead of adjusting to the element inside\n   */\n  fullwidth: PropTypes.bool,\n};\n\nControl.defaultProps = {};\n\nexport default Control;\n"]},"metadata":{},"sourceType":"module"}